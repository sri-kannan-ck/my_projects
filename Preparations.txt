http://lucybain.com/blog/tags/interview-questions/
https://github.com/bitfyre/Front-end-Developer-Interview-Questions

Which JavaScript libraries have you used?
1.Validanguage is an unobtrusive JavaScript form validation framework.
2. firebug - Firebug offers a stylish console to log, view and filter messages in JavaScript, which quickens the development process
3. Date.js - Working with dates are always tricky. So many dots, slashes and formats. 
             Datejs is a stunning library for simple to complex date functions. 
             It can parse dates like: “Next thursday”, “+2 years” and all formats like 2009.01.08, 12/6/2001 etc.
             
4. Typesafe

========================================================================
How is JavaScript different from Java?
1. Java is related to Javascript like how Ham is related to hamster. LOL
2. Java is an OOP programming language while Java Script is an OOP scripting language.
3. Java creates applications that run in a virtual machine or browser while JavaScript code is run on a browser only.
4. Java uses block-based scoping; JavaScript uses function-based scoping.
5. Java has an implicit 'this' scope for non-static methods, and implicit class scope; JavaScript has implicit global scope.

JavaScript is an object-oriented scripting language that allows you to create dynamic HTML pages, allowing you to process input 
data and maintain data, usually within the browser.

Java is a programming language, core set of libraries, and virtual machine platform that allows you to create compiled programs that run on nearly every platform, 
without distribution of source code in its raw form or recompilation.
=========================================================================
What are undefined and undeclared variables?
undeclared variables don’t even exist
undefined variables exist, but don’t have anything assigned to them
null variables exist and have null assigned to them

A variable is undeclared when it does not use the var keyword. It gets created on the global object (that is, the window), thus it operates in a different space as the declared variables. It doesn't work in strict mode.

Strict mode helps out in the following ways:
• It catches some common coding bloopers, throwing exceptions.
• It prevents, or throws errors, when relatively “unsafe” actions are taken (such as gaining access to the global object).
• It disables features that are confusing or poorly thought out.

Something is undefined when it hasn’t been defined yet. If you call a variable or function without having actually created it yet the parser will give you an not defined error.

null is a variable that is defined to have a null value.
========================================================================
What is a closure, and how/why would you use one?
A closure is a way of keeping access to variables in a function after that function has returned.
Usually you lose access to variables when a function returns but with closure you keep the variables of the function alive
In a closure those variables stick around for a while longer since there is a reference to the variables after the function returns.
But now why would I ever want to use a closure?

Well, since closures keep access to the variables they can be used to save state. And things that save state look a whole lot like objects.

function cat(name) {
    return {
        sayName: function() {
            return name;
        }
    }
}

var fluffy = cat('Mr. Fluffy');
fluffy.name // returns undefined
fluffy.sayName() // returns 'Mr. Fluffy'

var whiskers = cat('Whiskers');
whiskers.sayName() // returns 'Whiskers'
So this way you can create a whole bunch of cat objects that have a private name variable, which you can access via the sayName method.
Your favorite pattern used to create them?
Modulo pattern. 
IIFE stands for Immediately Invoked Function Expressions
An IIFE is an anonymous function that is created and then immediately invoked. It’s not called from anywhere else (hence why it’s anonymous), but runs just after being created.
IIFEs can also be used to enforce private variables and methods

===============================================================================
What's a typical use case for anonymous functions?
Anonymous functions are typically used as callbacks.
you can still have a reference to an anonymous function, but the name is directly attached to it.
Anonymous functions are declared inline and inline functions have advantages in that they can access variables in the parent scopes.
pros:
speed.
flexibility.
When I will use?
I'm gonna use this fn only once. Then make it into a anonymous function.
 Ref :  http://lucybain.com/blog/2014/js-anonymous-referenced-declared-functions/
===============================================================================
Explain the "JavaScript module pattern" and when you'd use it.
Bonus points for mentioning clean namespacing.
What if your modules are namespace-less?
In order to approach to Modular design pattern, you need to understand these concept first:

Immediately-Invoked Function Expression (IIFE):

(function() {
      // Your code goes here 
}());
There are two ways you can use the functions. 1. Function declaration 2. Function definition. Here are using function definition expression.

What is namespace? Now if we add the namespace to the above piece of code then

var anoyn = (function() {
}());
What is closure in JS?

It means if we declare any function with any variable scope/inside another function (in JS we can declare a function inside another function!) then it will count that function scope always. This means that any variable in outer function will be read always. It will not read the global variable (if any) with the same name. This is also one of the objective of using modular design pattern avoiding naming conflict.

var scope = "I am global";
function whatismyscope() {
    var scope = "I am just a local";
    function func() {return scope;}
    return func;
}
whatismyscope()()
Now we will apply these three concepts I mentioned above to define our first modular design pattern:

var modularpattern = (function() {
    // your module code goes here
    var sum = 0 ;

    return {
        add:function() {
            sum = sum + 1;
            return sum;
        },
        reset:function() {
            return sum = 0;    
        }  
    }   
}());
alert(modularpattern.add());    // alerts: 1
alert(modularpattern.add());    // alerts: 2
alert(modularpattern.reset());  // alerts: 0
If no namespace then it will be executed at the point of creation and it cannot be called anywhere in the script.

unintended effects of hoisting
===========================================================================================
how do you organize your code? (module pattern, classical inheritance?)

Modular pattern imitates the classes in conventional software engineering and it mainly focuses on the public and private access to methods & variables. The module pattern goals are to reduce the use of globally scoped variables, so as to decreasing the chances of conflicting with other code throughout an application.

This is also regarded as the most commonly used design pattern and it is also widely accepted in a number of large projects such as jQuery, Dojo, ExtJS and YUI.

Advantages
• Organized and clean approach for developers
• We can encapsulate data.
• More clean code in the global namespace(avoiding conflicts).

Disadvantages
• We cannot access private methods
• We can extend Private methods and functions.

Classical Inheritance
The classical inheritance in a way is similar to the inheritancein Java or C. Those who have backgrounds in those programming languages must be familiar. So by using classical inheritance, we are recreating the basic programming language’s behavior i.e. using classes and objects, which are instances of those classes.

So a classical pattern is used together with the“prototype”keyword added to the constructor and the newoperator.
1. Call a constructor function.
2. Have a child’s prototype point to the parent’s prototype.

Ref : http://www.pro-tekconsulting.com/blog/category/javascript/
================================================================================
What's the difference between host objects and native objects?

Built-in objects: String, Math, RegExp, Object, Function etc. - core predefined objects always available in JavaScript. Defined in the ECMAScript spec.

Host objects: objects like window, XmlHttpRequest, DOM nodes and so on, which is provided by the browser environment. They are distinct from the built-in objects because not all environment will have the same host objects. If JavaScript runs outside of the browser, for example as server side scripting language like in Node.js, different host objects will be available.

===================================================================================
Difference between:
function Person(){} var person = Person() var person = new Person()

This is a great question, because it highlights important differences between very important features that can be confusing initially, as they all look a bit similar. I'll answer to the best of my ability:

1. function Person() {} 
Declares a function (but does not execute it).
It will usually have some code between the curly brackets.

2. var person = Person()
Declares a variable (person), invokes a function (Person) and sets the value of person to the return of the function.

3. var person = new Person()
Creates a new instance of an object based on the Person function. So the variable (person) is now an Object, not just a string or a number.

Objects can contain indexed strings, numbers and even functions, and you can add more stuff to them, they're pretty awesome. The whole concept of Object Oriented Programming (OOP) is based on this.
https://www.quora.com/In-Javascript-what-is-the-difference-between-function-Person-var-person-Person-var-person-new-Person
var person = Person('Dave', 'Gahan', '1962-05-09'); // returns string

var person = new Person('Adam', 'Ant', '1954-11-03'); // returns object. and u can access the variables declared in the fucntion.
======================================================================================
What's the difference between .call and .apply?

the difference between call and apply. Both can be called on functions, which they run in the context of the first argument. In call the subsequent arguments are passed in to the function as they are, while apply expects the second argument to be an array that it unpacks as arguments for the called function.

The difference is that apply lets you invoke the function with arguments as an array; call requires the parameters be listed explicitly.
=====================================================================================
explain Function.prototype.bind?

when you realize that you need a solution to the problem of how to keep the context of this within another function, then you might not realize that what you actually need is Function.prototype.bind().
======================================================================================
Can you explain how inheritance works in JavaScript?

You must use a special object called prototype which assigns properties to a type such as Animal. Only functions have a prototype, which is why you must create a function first:

function Animal() {}; // This is the Animal *Type*
Animal.prototype.eat = function () {
    alert("All animals can eat!");
};

function Bird() {}; // Declaring a Bird *Type*
Bird.prototype = new Animal(); // Birds inherit from Animal
Bird.prototype.fly = function() {
    alert("Birds are special, they can fly!");
};

The effect of this is that any Birds you create (called an instance of Bird) all have the properties of Animals, but they also have the additional .fly():
===========================================================================
When would you use document.write() ?
document.write() shouldn’t be used after the page has loaded to change the content as it will overwrite the entire page 

good time to use:;  it is a good choice for third party vendors to use it to add their scripts.
===========================================================================
What's the difference between feature detection, feature inference, and using the UA string
Feature Detection:
When you check if a certain feature exists, that’s feature detection.Use feature detection if you're working with a feature that isn’t available across all browsers. 
Feature Inference:
When you make an assumption that because one feature is present (or not) another one will also be present
Chrome implements the Text function. I also know Chrome doesn’t have applyElement like IE does. So I'll write code like...

if(typeof applyElement != 'undefined') {
    // now I know I'm not in IE, I'll just assume Text is available
    text = new Text('Oh, how quick that fox was!');
}
“UA” stands for user agent, which means the browser
==================================================================================
Explain AJAX in as much detail as possible

- Stands for Asynchronous JavaScript and XML
- Used to send requests and handle responses from the server without disrupting the current display
- Requires a url to send the request to
- Requests use the method 'get' by default, but can be changed by changing the type
- Can send up data
- Can have success and error callbacks
AJAX does not allow requesting of data from another domain. 
======================================================================================
Explain how JSONP works?

It's used when requesting data from another domain.
AJAX does not allow requesting of data from another domain. JSONP is a workaround using script tags. You set the script src to be the URL you're hitting and pass in a callback. The callback will handle the data that gets passed back from the JSONP server.
===================================================================================
Explain "hoisting".

It's when a named function becomes available in the entire scope even before it is declared. So it is as if the function declaration is hoisted to the top of the scope.

This doesn't work for anonymus fn
=====================================================================================
What is FOUC? How do you avoid FOUC?

web pages load with unstyled content, and then it might be a few seconds (or minutes) before you see what may or may not be the page's intended look and feel. In web design, this aberration is called the unintended Flash of Unstyled Content (FOUC).
Resolve:
hiding all or part of the web page until all styles and JavaScript are finished 
=======================================================================================
Describe event bubbling.
Event bubbling occurs when a user interacts with a nested element and the event propagates up (“bubbles”) through all of the ancestor elements.
When the user clicks the button the events starts at the button element and goes to its parents then to the ancestor and stops 
when the document is reached.

How to stop?
event.stoppropagation()
=========================================================================================
What's the difference between an "attribute" and a "property"?
JS DOM objects have properties. 

<a href='page2.html' class='link classes' name='linkName' id='linkID'>Hi</a>

$('#linkID').prop('href'); // returns "http://example.com/page2.html"
$('#linkID').prop('name'); // returns "linkName"
$('#linkID').prop('id'); // returns "linkID"
$('#linkID').prop('className'); // returns "link classes"'

all of the properties we set in the HTML are available through prop. 

Attributes are in the HTML itself, rather than in the DOM. It takes only string. 
And it always points to the default value even the values are updated.
============================================================================================
Difference between document load event and document ready event?

$(document).ready() fires when the HTML has finished loading. You can’t interact with the DOM before the HTML has finished loading
window.onload fires when all of the content (images, scripts, CSS, the whole lot) has finished loading.

=============================================================================================
What is the difference between == and ===?

==== strict comparison

The 3 equal signs mean "equality without type coercion". Using the triple equals, the values must be equal in type as well.

0 == false   // true
0 === false  // false, because they are of a different type
1 == "1"     // true, automatic type conversion for value only
1 === "1"    // false, because they are of a different type
null == undefined // true
null === undefined // false
'0' == false // true
'0' === false // false
========================================================================
Explain how you would get a query string parameter from the browser window's URL.
The Mozilla address bar showing a URL with the query string title=Main_page&action=raw
Ans: Regex
========================================================================
Explain event delegation.
Event delegation is when you bind an event listener to a parent. 
Event delegation allows us to attach a single event listener, to a parent element, that will fire for all children matching a selector, whether those children exist now or are added in the future

======================================================================
Describe inheritance patterns in JavaScript.
JS objects each have a “hook” to its parent object, or prototype. Obviously everything the child object defines it has access to, but it also can climb up the prototype tree to access its parent’s (or ancestor’s) methods and properties.
======================================================================
Make this work:
[1,2,3,4,5].duplicator(); 
Array.prototype.duplicator = function(){
    return this.concat(this);
}
alert([1,2,3,4,5].duplicator());
===========================================================================
Why is it called a Ternary statement, what does the word "Ternary" indicate?
Ternary means 3 parameters
conditional ? truethy_block : falsey_block
===========================================================================
What is the arity of a function?
The arity property used to return the number of arguments expected by the function
==============================================================================
~~3.14
returns 3
bit wise NOT operator and two bitwise NOT operator cancels each other
=============================================================================
