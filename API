Running notes on API
=====================

What is an API ?
API - Application Programming Interface. 
It says about the features of the library. Through the features, one can interact with API.

Example: Menu card in restaurant. The menu card says about the items in the kitchen. Throught the menu card one can order the items 
and they can get it from the kitchen library.
Sometimes people will have constraints on the ingredients of the menu items which are technically the arguments passed to the kitchen
library.
Finally if the restaurant takes money, u have to pay for your API or you can take for free any time.

API are increasing in exponential way. How to understand and build it properly ?
Start from the basic:
1. Server - An another computer without monitor, keyboard and mouse. It is used to store the data and retrieve it etc. Lots
of functionalities  are there. Most common server is web-server. The server will have webpages and it sends to the client upon 
request.

Simple analogy:
In the same way that a program like Solitaire 
waits for you to click on a card to do something, a web server runs a program that waits for a person to ask it for a web page.

Explain Like I'm Five on API
============================
Like how humans view, post, edit the forms showed by websites, computers view, edit, store, manipulate the data using API for 
simplicity.

How an API is used
==================
When two systems are linked together though API then it is called as "Integrated". Now one of the system is called "Server".
The Server provides the API. API is an another program running in the server. The other system is client and it is seperate
program that knows what API provides and based on it, the program is built.
This is a separate program that knows what data is available through the API and can manipulate it, typically at the request of a user. 
A great example is a smartphone app that syncs with a website. 
When you push the refresh button your app, it talks to a server via an API and fetches the newest info.

CHAPTER 2
==========

Knowing about protocols
There is an etiquette to communicate between two humans. Similarly, there is an eiquette called "protocols" to communicate
bettween client and server.

The famous one is HTTP.
The client sends request to the server called "HTTP request" and the server replies back called "HTTP response"
What HTTP Request's has ?
4 things.
1. URL
2. Method - GET, POST, PUT, DELETE etc
3. Headers - Meta info [information about request or response[]
4. Body

Here, except body rest should follow the rules as it should be. 
URL is called resource in API. Method says why u are contacting the server. 
Headers carry meta-info about client. Example: Is the client is a desktop or smartphone etc
Body - You can write anything you want in Body. [No rules here]

What HTTP response has?
1. Status - [404 etc, 2xx, 3xx, 4xx, 5xx]
2. Headers
3. Body

Now how API is build on HTTP:
API is built on top of HTTP to ease the client to send request. 

CHAPTER 3
==========
Explore the data APIs , how it's formatted, and how HTTP makes it possible.
===========================================================================

The body of the client request can have anyhing. But it is good to
represent the data's of the body in a specific format.

They are:
1. JSON
2. XML

JSON - Key, value format
XML - XML tags format.

When you are going to send the client request with body in it, it is good
to specify the data format of the body in "headers" field so that 
the server can easily read the body.

The term that has to be added in the header is : 'Content-type'
If Content-type : "application/json" then it means the body is in JSON format.
Similarly, Server too will send what type of the data format in body to request
using the same term.

If the client knows only one format of understanding the data then 
it has to be specified in the "headers" field before-hand during the 
client request. The term to be specify this is "accept"
ex: Accept : "application/xml" means the data which server will send should
be of format XML alone.


